// Author: Tait Kline
import java.security.SecureRandom;

public class Add128 implements SymCipher
{
    private byte[] key;

    // parameterless constructor will create a random 128 byte additive key and store it in an
    // array of bytes.
    Add128()
    {
        SecureRandom rng = new SecureRandom();
        key = new byte[128];
        rng.nextBytes(key);         // fills byte array with randomly generated bytes
    }

    // The second constructor will use the byte array parameter as its key.
    Add128(byte[] key)
    {
        this.key = key.clone();
    }
    // Return an array of bytes that represent the key for the cipher
	public byte [] getKey()
    {
        return key;
    }	
	
	// Encode the string using the key and return the result as an array of
	// bytes.  Note that you will need to convert the String to an array of bytes
	// prior to encrypting it.  Also note that String S could have an arbitrary
	// length, so your cipher may have to "wrap" when encrypting (remember that
	// it is a block cipher)
	public byte [] encode(String S)
    {
        byte[] encryption = S.getBytes();       // get byte array representation of argument string

        // encrypt the byte array
        int keyIndex = 0;
        for (int i = 0 ; i < encryption.length ; i++)
        {
            // reset key index if we have used the whole key
            if (keyIndex == key.length)
                keyIndex = 0;                    
            encryption[i] = (byte) (encryption[i] + key[keyIndex]);
            keyIndex++;
        }

        return encryption;
    }
	
	// Decrypt the array of bytes and generate and return the corresponding String.
	public String decode(byte [] bytes)
    {
        // decrypt the byte array
        int keyIndex = 0;
        for (int i = 0 ; i < bytes.length ; i++)
        {
            // reset key index if we have used the whole key
            if (keyIndex == key.length)
                keyIndex = 0;                    
            bytes[i] = (byte) (bytes[i] - key[keyIndex]);
            keyIndex++;
        }

        String decoded = new String(bytes);     // convert byte array back to a string
        return decoded;
    }
}
